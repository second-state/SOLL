// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#ifdef SEMASTART
__SEMASTART = DIAG_START_SEMA,
#undef SEMASTART
#endif

DIAG(err_duplicate_definition, CLASS_ERROR, (unsigned)diag::Severity::Error, "'%0' duplicate definition.", 0, false, 1)
DIAG(err_super_in_noninheritance_contract, CLASS_ERROR, (unsigned)diag::Severity::Error, "Can not use super in noninheritance_contract.", 0, false, 0)
DIAG(err_undeclared_var_use, CLASS_ERROR, (unsigned)diag::Severity::Fatal, "Use of undeclared identifier '%0'", 0, false, 0)
DIAG(err_unimplemented_identifier, CLASS_ERROR, (unsigned)diag::Severity::Error, "'%0' is not yet supported", 0, false, 1)
DIAG(err_unimplemented_constructor_parameter, CLASS_ERROR, (unsigned)diag::Severity::Error, "Constructor with parameter is not yet supported", 0, false, 1)
DIAG(err_typecheck_invalid_cast, CLASS_ERROR, (unsigned)diag::Severity::Error, "Invalid type casting from '%0' to '%1'.", 0, false, 1)
DIAG(err_typecheck_unimplemented_cast, CLASS_ERROR, (unsigned)diag::Severity::Error, "type casting from '%0' to '%1' is not yet supported", 0, false, 1)
DIAG(err_typecheck_no_implicit_convertion, CLASS_ERROR, (unsigned)diag::Severity::Error, "Cannot implicit convert between '%0' and '%1'", 0, false, 1)
DIAG(err_typecheck_subscript_value, CLASS_ERROR, (unsigned)diag::Severity::Error, "Subscripted value is not an mapping, array, string or bytes", 0, false, 1)
DIAG(err_typecheck_subscript_not_integer, CLASS_ERROR, (unsigned)diag::Severity::Error, "Subscript is not an integer", 0, false, 1)
DIAG(err_typecheck_unary_expr, CLASS_ERROR, (unsigned)diag::Severity::Error, "Invalid argument type %0 to unary expression", 0, false, 1)
DIAG(err_typecheck_invalid_operands, CLASS_ERROR, (unsigned)diag::Severity::Error, "Invalid operands to binary expression ('%0' and '%1')", 0, false, 1)
DIAG(err_typecheck_exp_signed, CLASS_ERROR, (unsigned)diag::Severity::Error, "Exponentiation power is not allowed to be a signed integer type.", 0, false, 1)
DIAG(err_ovl_no_viable_function_in_call, CLASS_ERROR, (unsigned)diag::Severity::Error, "No matching function for call to '%0'", 0, false, 1)
DIAG(err_no_member, CLASS_ERROR, (unsigned)diag::Severity::Error, "No member named ;%0; in ;%1'.", 0, false, 1)
DIAG(warn_impcast_integer_precision, CLASS_WARNING, (unsigned)diag::Severity::Warning, "Implicit conversion loses integer precision: '%0' to '%1'.", 0, false, 1)
DIAG(err_resolve_inherit_fail, CLASS_ERROR, (unsigned)diag::Severity::Error, "Fail to resolve inherit relationship", 0, false, 1)
DIAG(err_c3_algorithm_fail, CLASS_ERROR, (unsigned)diag::Severity::Error, "Fail to apply C3 linearization on '%0'.", 0, false, 1)
DIAG(err_interface_inherit_from_other_contracts, CLASS_ERROR, (unsigned)diag::Severity::Error, "Interface can only inherit from interface, but '%0' is not a interface.", 0, false, 1)
DIAG(err_interface_function_is_not_an_external, CLASS_ERROR, (unsigned)diag::Severity::Error, "%0 must be external.", 0, false, 1)
DIAG(err_interface_constructor_is_not_allowed, CLASS_ERROR, (unsigned)diag::Severity::Error, "constructor of interface %0 is not allowed ", 0, false, 1)
DIAG(err_interface_state_variables_is_not_allowed, CLASS_ERROR, (unsigned)diag::Severity::Error, "state variables %0 in interface %1 is not allowed ", 0, false, 1)
DIAG(err_statevar_cannot_be_overrided, CLASS_ERROR, (unsigned)diag::Severity::Error, "state variable %0 can not be overrided", 0, false, 1)
DIAG(err_decl_need_to_be_virtual, CLASS_ERROR, (unsigned)diag::Severity::Error, "virtual need be marked for %0", 0, false, 1)
DIAG(err_decl_need_to_be_overrided, CLASS_ERROR, (unsigned)diag::Severity::Error, "override need be marked for %0", 0, false, 1)
DIAG(err_visibility_not_match, CLASS_ERROR, (unsigned)diag::Severity::Error, "visibility of %0 did not match", 0, false, 1)
DIAG(err_private_function_can_not_be_virtual, CLASS_ERROR, (unsigned)diag::Severity::Error, "private funtcion %0 can not be virtual", 0, false, 1)
DIAG(err_mutability_overriding_not_allow, CLASS_ERROR, (unsigned)diag::Severity::Error, "can not change function %0 mutability", 0, false, 1)
DIAG(err_func_to_var_overrided_unsoupport, CLASS_ERROR, (unsigned)diag::Severity::Error, "function to state variables override is unsupport", 0, false, 1)
